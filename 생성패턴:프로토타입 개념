## 프로토타입

- 원본 객체의 원형(프로토타입)을 복제하여 새로운 객체를 생성하는 디자인 패턴


 **Prototype(프로토타입)**:
   
 - 복제를 통해 새로운 객체를 생성하기 위한 인터페이스를 제공합니다.

**ConcretePrototype(구체적인 프로토타입)**:
 
 - Prototype을 구현한 클래스입니다.
 - 복제를 위해 `clone()` 메서드를 구체화합니다.
 - 자신의 복사본을 생성하고, 필요에 따라 초기화할 수 있습니다.
 
 **Client(클라이언트)**:
 
 - 프로토타입을 이용하여 새로운 객체를 생성하는 역할을 합니다.
 - 새로운 객체를 생성하기 위해 `clone()` 메서드를 호출합니다.

### 프로토타입 패턴의 장점

- 객체 생성 과정을 단순화하여 새로운 객체 생성을 용이하게 합니다.
- 기존 객체의 상태를 기반으로 복사하기 때문에 새로운 객체를 초기화하는데 필요한 데이터를 제공합니다.
- 객체를 복제함으로써 객체 생성에 필요한 비용을 줄일 수 있습니다.

### 프로토타입 패턴의 활용 예시

- 객체 생성 과정이 복잡하거나 시간이 오래 걸리는 경우에 사용됩니다.
- 초기화된 객체를 복사하여 비슷한 객체를 생성하는 상황에 활용됩니다.
- 예를 들어, 게임에서 캐릭터의 상태를 복제하여 새로운 캐릭터를 생성하는 데 사용될 수 있습니다.

프로토타입 패턴은 객체를 복제하여 새로운 객체를 생성하는 유연하고 효율적인 방법을 제공하여 객체 생성 과정을 간소화하고자 할 때 유용한 디자인 패턴입니다.
게임(몬스터,맵),네트워크(병렬처리),각종 객체 복제 ..등
